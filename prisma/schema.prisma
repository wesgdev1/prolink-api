// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id              String         @id @default(uuid()) @db.Uuid
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
  email           String         @unique
  tipoUsuario     String
  password        String
  urlFoto         String?
  cliente         Cliente?
  tecnico         Tecnico?
  comentarios     Comentario[]
  tipoDocumento   String?
  numeroDocumento String?        @unique
  mensajes        Mensaje[]
  conversacionesA Conversacion[] @relation("usuarioA")
  conversacionesB Conversacion[] @relation("usuarioB")
}

model Tecnico {
  id               String           @id @default(uuid()) @db.Uuid
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @updatedAt
  nombreCompleto   String?
  email            String           @unique
  tipoDocumento    String
  numeroDocumento  String           @unique
  telefono         String
  direccion        String
  usuario          Usuario?         @relation(fields: [usuarioId], references: [id])
  usuarioId        String?          @unique @db.Uuid
  blogs            Blog[]
  soportesTecnicos SoporteTecnico[]
}

model Cliente {
  id               String           @id @default(uuid()) @db.Uuid
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @updatedAt
  nombreCompleto   String
  email            String?          @unique
  numeroContrato   String?
  contratoActivo   Boolean          @default(true)
  tipoDocumento    String
  numeroDocumento  String           @unique
  telefono         String
  direccion        String
  servicio         String?
  ipNavegacion     String?
  usuario          Usuario?         @relation(fields: [usuarioId], references: [id])
  usuarioId        String?          @unique @db.Uuid
  facturas         Factura[]
  soportesTecnicos SoporteTecnico[]
}

model Blog {
  id          String       @id @default(uuid()) @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  title       String
  content     String
  published   Boolean      @default(false)
  tecnico     Tecnico?     @relation(fields: [tecnicoId], references: [id])
  tecnicoId   String?      @db.Uuid
  categoria   Categoria?   @relation(fields: [categoriaId], references: [id])
  categoriaId String?      @db.Uuid
  comentarios Comentario[]
  fotos       Foto[]
}

model Categoria {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  nombre    String
  blogs     Blog[]
}

model Comentario {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  content   String
  blog      Blog      @relation(fields: [blogId], references: [id])
  blogId    String    @db.Uuid
  usuario   Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId String    @db.Uuid
}

model SoporteTecnico {
  id              String    @id @default(uuid()) @db.Uuid
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  numeroSoporte   Int?      @unique @default(autoincrement())
  fechaGeneracion String?
  horaGeneracion  String?
  titulo          String
  descripcion     String
  estado          Boolean   @default(false)
  solucion        String?
  tecnico         Tecnico?  @relation(fields: [tecnicoId], references: [id])
  tecnicoId       String    @db.Uuid
  cliente         Cliente   @relation(fields: [clienteId], references: [id])
  clienteId       String    @db.Uuid
}

model Factura {
  id                  String    @id @default(uuid()) @db.Uuid
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
  fechaLimite         DateTime
  total               Int
  estado              Boolean   @default(false)
  cliente             Cliente?  @relation(fields: [clienteId], references: [id])
  clienteId           String?   @db.Uuid
  descripcionServicio String?
  referencia          String?
  pagos               Pago[]
}

model Pago {
  id             String   @id @default(uuid()) @db.Uuid
  createdAt      DateTime @default(now())
  factura        Factura  @relation(fields: [facturaId], references: [id])
  facturaId      String   @db.Uuid
  referenciaPago String?
}

model Foto {
  id        String   @id @default(uuid()) @db.Uuid
  url_foto  String?  @db.Text
  createdAt DateTime @default(now())
  Blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?  @db.Uuid
}

model Mensaje {
  id             String        @id @default(uuid()) @db.Uuid
  createdAt      DateTime      @default(now())
  content        String
  Usuario        Usuario?      @relation(fields: [usuarioId], references: [id])
  usuarioId      String?       @db.Uuid
  conversacion   Conversacion? @relation(fields: [conversacionId], references: [id])
  conversacionId String?       @db.Uuid
}

model Conversacion {
  id                 String    @id @default(uuid()) @db.Uuid
  numeroConversacion Int?      @unique @default(autoincrement())
  createdAt          DateTime  @default(now())
  mensajes           Mensaje[]
  usuarioA           Usuario?  @relation(fields: [usuarioCliente], references: [id], name: "usuarioA")
  usuarioCliente     String?   @db.Uuid
  usuarioB           Usuario?  @relation(fields: [usuarioAdmin], references: [id], name: "usuarioB")
  usuarioAdmin       String?   @db.Uuid
  estado             Boolean   @default(false)
}

model Ping {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  ip        String
  estado    Boolean  @default(false)
}
